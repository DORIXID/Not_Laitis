package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	"os"
	"os/exec"
	"time"

	"github.com/gorilla/websocket"
)

/*

 */

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ json —Ñ–∞–π–ª–∞
type commandStruct struct {
	Category    string   `json:"Category"`
	Args        []string `json:"Args"`
	Description string   `json:"Description"`
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ json —Ñ–∞–π–ª–∞
type commandMap map[string]commandStruct

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∫–∞—Ä—Ç–æ–π —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏, —Ö—Ä–∞–Ω—è—â–∏–º–∏ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ã
var commands commandMap

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
type RegisterRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// MAIN
func main() {
	//defer finish()

	// URL –ø—É—Ç—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–Ω–∞
	registerURL := "http://185.72.144.59:80/register"
	loginURL := "http://185.72.144.59:80/login"
	// URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
	wsURL := "ws://185.72.144.59:80/ws"

	// –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
	if _, err := os.OpenFile("commands.json", os.O_WRONLY|os.O_CREATE, 0666); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ commands.json: ", err)
		return
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞
	commands = loadCommandsFromFile("commands.json")

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
	commands = addCommand(commands, "Start message", commandStruct{
		Category:    "system",
		Args:        []string{"cmd", "/C", "msg * \"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\""},
		Description: "–í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
	})

	commands = addCommand(commands, "offComp", commandStruct{
		Category:    "system",
		Args:        []string{"cmd", "/C", "shutdown /s /t 60"},
		Description: "–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥",
	})

	//commands.Execute("Play_92")

	// –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
	//selectAllFrom(commands)

	// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	//filterByCategory(commands, "system")

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª
	saveCommandsToFile("commands.json", commands)

	// –ó–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
	//executeCommand("Message")

	//–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
	token, err := loadString(".token")
	if err != nil {
		var resp string
		log.Println("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
		for {
			fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ \"–†\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ \"–õ\", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: ")
			fmt.Fscan(os.Stdin, &resp)
			var login string
			var password string
			if resp == "–†" {
				fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
				fmt.Fscan(os.Stdin, &login)
				fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
				fmt.Fscan(os.Stdin, &password)
				if err := registerUser(registerURL, login, password); err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
					continue
				}
				fmt.Println("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è")
			} else if resp == "–õ" {
				fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
				fmt.Fscan(os.Stdin, &login)
				fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
				fmt.Fscan(os.Stdin, &password)
				if err := loginUser(loginURL, login, password); err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
					continue
				}
				fmt.Println("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
				log.Println("üîë –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω:", token)
				// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ rKey –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
				rKey, err := loadString(".rKey")
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ rKey: ", err)
					return
				}
				fmt.Printf("–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥: \nhttp://185.72.144.59:80/run?user=%s&cmd=–í–∞—à–∞–ö–æ–º–∞–Ω–¥–∞\n", rKey)
				//–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ ws
				connectToWS(wsURL)
			} else {
				fmt.Print("\n–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –æ—Ç–≤–µ—Ç")
			}
		}
	} else {
		log.Println("üîë –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω:", token)
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ rKey –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
		rKey, err := loadString(".rKey")
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ rKey: ", err)
			return
		}
		fmt.Printf("–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥: \nhttp://185.72.144.59:80/run?user=%s&cmd=–í–∞—à–∞–ö–æ–º–∞–Ω–¥–∞\n", rKey)
		//–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ ws
		connectToWS(wsURL)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
func registerUser(url string, username string, password string) error {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	reqData := RegisterRequest{
		Username: username,
		Password: password,
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
	jsonData, err := json.Marshal(reqData)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", resp.Status)
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º randomKey –≤ —Ñ–∞–π–ª
	randomKey := string(body)
	fmt.Println("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–æ–ª—É—á–µ–Ω randomKey:", randomKey)
	if err := saveString(randomKey, ".rKey"); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è rKey: %v", err)
	}

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ–∏–∑–∞—Ü–∏—é
func loginUser(url string, username string, password string) error {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏(–∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
	reqData := RegisterRequest{
		Username: username,
		Password: password,
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
	jsonData, err := json.Marshal(reqData)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	//–ó–∞–∫—Ä—ã–≤–∞–µ–º(—É–¥–∞–ª—è–µ–º) —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %s", resp.Status)
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	var loginResp map[string]string
	if err := json.Unmarshal(body, &loginResp); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
	token, ok := loginResp["token"]
	if !ok {
		return fmt.Errorf("—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
	}
	if err := saveString(token, ".token"); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
	rKey, ok := loginResp["rKey"]
	if !ok {
		return fmt.Errorf("—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
	}
	if err := saveString(rKey, ".rKey"); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	fmt.Println("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞, —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
	return nil
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ string –≤ —Ñ–∞–π–ª
func saveString(varString string, filename string) error {
	// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª varString, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –µ–≥–æ –≤ –±–∞–π—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
	return os.WriteFile(filename, []byte(varString), 0600) // –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
}

// –ó–∞–≥—Ä—É–∑–∫–∞ string –∏–∑ —Ñ–∞–π–ª–∞
func loadString(filename string) (string, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT —Ç–æ–∫–µ–Ω–∞
func connectToWS(url string) {
	// –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	token, err := loadString(".token")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ", err)
		return
	}
	headers := http.Header{}
	headers.Add("Authorization", "Bearer "+token) // –Ø –∫—Å—Ç–∞ –Ω–µ –∑–Ω–∞—é –µ—Å—Ç—å –ª–∏ —Å–º—ã—Å–ª –¥–æ–±–∞–≤–ª—è—Ç—å Bearer —Ç –∫ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ–Ω –≤—Å–µ —Ä–∞–≤–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
	// –±–µ–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ —É–¥–∞—á–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏

	for {
		//–ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
		//–ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–µ —É–¥–∞–µ—Ç—Å—è, —Ç–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∑–∞–Ω–æ–≤–æ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
		conn, _, err := websocket.DefaultDialer.Dial(url, headers)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: %v", err)
			log.Println("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
			for i := 4; i != 0; i-- {
				fmt.Printf("%d...", i)
				time.Sleep(1 * time.Second)
			}
			fmt.Println("")
			continue
		}

		log.Println("‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É")

		// –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
		for {
			_, message, err := conn.ReadMessage()
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				conn.Close() // –Ø–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
				break
			}
			command := string(message)
			log.Println("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:", command)
			go executeCommand(command)
		}
	}
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ cmd
func executeCommand(command string) {
	cmdInfo, ok := commands[command]
	if !ok {
		fmt.Printf("\n–ö–æ–º–∞–Ω–¥–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", command)
		return
	}
	if len(cmdInfo.Args) == 0 {
		fmt.Printf("–í –∫–æ–º–∞–Ω–¥–µ \"%s\" –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", command)
		return
	}
	log.Printf("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: %s", command)
	cmd := exec.Command(cmdInfo.Args[0], cmdInfo.Args[1:]...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
		log.Printf("–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: %s\n", output)
		return
	}
	log.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç:\n%s\n", output)
}

// –§–£–ù–ö–¶–ò–Ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ò–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ command.Execute –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func handleConnection(conn net.Conn, commands commandMap) {
	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	reader := bufio.NewReader(conn)
	// –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
	commandFromServer, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println(err)
		return
	}
	// –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	commandFromServer = commandFromServer[:len(commandFromServer)-1]
	// –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
	fmt.Println(commandFromServer)
	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	conn.Close()
	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–Ω—è—Ç—É—é –∫–æ–º–∞–Ω–¥—É
	commands.Execute(commandFromServer)
}

// –§–£–ù–ö–¶–ò–Ø –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã(map) —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ json —Ñ–∞–π–ª–µ
func saveCommandsToFile(filename string, commands commandMap) {
	// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ json
	jsonData, err := json.MarshalIndent(commands, "", " ")
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ json: ", err)
		return
	}

	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
	file, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666) // os.O_WRONLY - —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å—å, os.O_CREATE - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏, os.O_TRUNC - —Å—Ç–∏—Ä–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: ", err)
		return
	}

	//–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
	_, err = file.Write(jsonData)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ json: ", err)
		return
	}
	defer file.Close()
}

// –§–£–ù–ö–¶–ò–Ø –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ json —Ñ–∞–π–ª–∞ –≤ –∫–∞—Ä—Ç—É(map)
func loadCommandsFromFile(filename string) commandMap {
	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è
	file, err := os.Open(filename)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: ", err)
		return make(commandMap)
	}
	defer file.Close() //–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª

	// –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é jsonData
	jsonData, err := os.ReadFile(filename)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ", err)
		return make(commandMap)
	}

	// –î–µ—Å—Ä–µ–∞–∏–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ jsonData
	var commands commandMap
	err = json.Unmarshal(jsonData, &commands)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–Ω–Ω—ã—Ö: ", err)
		return make(commandMap)
	}
	return commands //–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É
}

// –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –∫–æ–º–∞–Ω–¥—ã - select i from command
func selectIFrom(mapp commandMap, key string) {
	fmt.Println("--------------------")
	fmt.Printf("–ò–º—è –∫–æ–º–∞–Ω–¥—ã: %s\n", key)
	fmt.Printf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n", mapp[key].Category)
	fmt.Printf("–ê—Ä–≥—É–º–µ–Ω—Ç—ã: %s\n", mapp[key].Args)
	fmt.Printf("–û–ø–∏—Å–∞–Ω–∏–µ: %s\n", mapp[key].Description)
	fmt.Println("--------------------")
}

// –§–£–ù–ö–¶–ò–Ø –í–´–ë–û–†–ê –í–°–ï–• –ö–û–ú–ê–ù–î - SELECT * FROM command
func selectAllFrom(commands commandMap) {
	i := 0
	for key, _ := range commands {
		i++
		fmt.Printf("–ö–æ–º–∞–Ω–¥–∞ ‚Ññ%d\n", i) //–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
		selectIFrom(commands, key)
	}
}

// –§–£–ù–ö–¶–ò–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
func filterByCategory(mapp commandMap, category string) {
	fmt.Printf("\n--------------------\n–§–∏–ª—å—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"%s\":\n--------------------\n", category)
	for key, cmd := range mapp {
		if cmd.Category == category {
			selectIFrom(mapp, key)
		}
	}
	fmt.Printf("‚úì-–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞-‚úì\n--------------------\n")
}

// –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ê–ù–î–´ –í –ö–ê–†–¢–£ –° –ö–û–ú–ê–ù–î–ê–ú–ò
// –±–µ—Ä–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–∞—Ä—Ç—É(map), –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∑–∞—Ç–µ–º –±–µ—Ä–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã, –∑–∞—Ç–µ–º –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã, –∞ –≤ –∫–æ–Ω—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç—É
func addCommand(mapp commandMap, name string, cmd commandStruct) commandMap {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
	if _, exists := mapp[name]; exists { //–ó–¥–µ—Å—å –≤ if —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è - _, exists := mapp[name] - —Ç—É—Ç _ —ç—Ç–æ –∑–Ω–∞—á–Ω–∏–µ, –∞ exists —ç—Ç–æ bool –∑–Ω–∞—á–µ–Ω–∏–µ.
		fmt.Printf("\n\nThe \"%s\" command is already in use.\n\n", name) //–û–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, –ø–æ–ª—É—á–∏–ª–∞—Å—å –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É –∏–ª–∏ –Ω–µ—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ —Å–º–æ—Ç—Ä–∏—Ç—Å—è –Ω–∞ —Ç–æ true  –∏–ª–∏ false —É exists
		return mapp                                                       // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	}
	mapp[name] = cmd
	return mapp // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–∞–π—Å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–æ–π
}

// –ú–ï–¢–û–î –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
// –ë–µ—Ä–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–∞—Ä—Ç—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã(–∫–ª—é—á –∫–∞—Ä—Ç—ã)
// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
func (mapp commandMap) Execute(key string) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
	cmdInfo, ok := mapp[key]
	if !ok {
		fmt.Printf("\n–ö–æ–º–∞–Ω–¥–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n", key)
		return
	}
	if len(cmdInfo.Args) == 0 {
		fmt.Printf("–í –∫–æ–º–∞–Ω–¥–µ \"%s\" –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", key)
		return
	}
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∏ –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	cmd := exec.Command(cmdInfo.Args[0], cmdInfo.Args[1:]...) // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º cmdInfo.Args[0] –∏ —Ñ–ª–∞–≥–∞–º–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ cmdInfo.Args[1:]...
	stdoutStderr, err := cmd.CombinedOutput()                 // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—à—å—é cmd.CombinedOutput(), –∞ —Ç–∞–∫–∂–µ –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥, —Ç–∞–∫ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ –æ–¥–Ω–æ –º–µ—Å—Ç–æ(stdoutStderr),
	if err != nil {                                           // –∞ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è err –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ.
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: %v\n", err)
		return
	}
	fmt.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã \"%s\": \n%s\n", key, stdoutStderr)
}

// –ò–ù–¢–ï–†–§–ï–ô–° –¥–ª—è –≤—ã–ø–æ–ª–Ω–∏–º—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
type Executable interface {
	Execute(key string)
}

// DEFER-FUNCTION - –≤—ã–≤–æ–¥–∏—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª json
func finish() {
	fmt.Println("\n\n‚úì‚úì‚úì-–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞-‚úì‚úì‚úì")
}
